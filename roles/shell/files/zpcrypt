#!/usr/bin/env python3

# No standard AES256-GCM tools :(

import sys
import os
import json
import argparse
from base64 import b64encode, b64decode
from getpass import getpass
from black import out
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers.aead import AESGCM


def get_args():
    parser = argparse.ArgumentParser()
    mode = parser.add_mutually_exclusive_group()
    mode.add_argument(
        "-e",
        "--encrypt",
        help="Encrypt mode",
        action="store_true",
    )
    mode.add_argument(
        "-d",
        "--decrypt",
        help="Decrypt mode",
        action="store_true",
    )
    parser.add_argument(
        "-o",
        "--output",
        help="Output to file",
        type=argparse.FileType("wb"),
    )
    parser.add_argument(
        "file",
        help="File to work from",
        type=argparse.FileType("rb"),
    )
    parser.add_argument(
        "--aad",
        help="Override generated aad (Default input filename)",
        type=str,
    )
    return parser.parse_args()


def main():
    args = get_args()

    # Workout our operating mode
    encrypting = True
    if args.encrypt:
        encrypting = True
    elif args.decrypt:
        encrypting = False
    elif args.file.name.endswith(".enc"):
        encrypting = False

    # If supplied with an aad convert it from string to bytes
    if args.aad:
        args.aad = args.aad.encode("utf-8")

    if encrypting:
        output_file = args.output
        if not output_file:
            output_file = open(f"{args.file.name}.enc", "wb")

        print(f"Encrypting {args.file.name} to {output_file.name}...")
        encrypt(create_default_crypt_config(), args.file, output_file, aad=args.aad)
    else:
        output_file = args.output
        if not output_file:
            if args.file.name.endswith(".enc"):
                output_file = open(args.file.name[:-4], "wb")
            else:
                sys.exit("ERROR: Unable to guess decryption output file name (input missing .enc suffix)")

        print(f"Decrypting {args.file.name} to {output_file.name}...")
        decrypt(args.file, output_file, aad=args.aad)


def create_default_crypt_config():
    return {
        "key": {
            "type": "PBKDF2",
            "algorithm": "SHA512",
            "iterations": 2000000 + int.from_bytes(os.urandom(2), byteorder="big"),
            "salt": b64encode(os.urandom(64)).decode("utf-8"),
        },
        "cipher": {
            "type": "AESGCM",
            "nonce": b64encode(os.urandom(12)).decode("utf-8"),
        },
    }


def prompt_for_password(confirm=True):
    __password = getpass("Password: ")
    if confirm:
        __repeat_password = getpass("Repeat Password: ")
        if __password != __repeat_password:
            raise ValueError("Repeated password didn't match original password!")
        del __repeat_password
    return __password.encode("utf-8")


def get_key(config, confirm=True):
    if config["key"]["type"] != "PBKDF2":
        raise NotImplementedError("Only PBKDF2 is supported as key type")

    if config["key"]["algorithm"] != "SHA512":
        raise NotImplementedError("Only SHA512 is supported as PBKDF2's algorithm")

    return PBKDF2HMAC(
        algorithm=hashes.SHA512(),
        length=32,
        salt=b64decode(config["key"]["salt"]),
        iterations=config["key"]["iterations"],
    ).derive(prompt_for_password(confirm=confirm))


def encrypt(config, input_file, output_file, aad=None):
    if config["cipher"]["type"] != "AESGCM":
        raise NotImplementedError("Only AESGCM is supported as cipher type")

    cipher = AESGCM(get_key(config))
    if not aad:
        aad = os.path.basename(input_file.name).encode("utf-8")
    cipher_text = cipher.encrypt(b64decode(config["cipher"]["nonce"]), input_file.read(), aad)

    output_file.write(json.dumps(config, indent=None).encode("utf-8"))
    output_file.write(b"\n")
    output_file.write(cipher_text)


def decrypt(input_file, output_file, aad=None):
    cipher_text = input_file.read()

    config, cipher_text = cipher_text.split(b"\n", 1)
    config = json.loads(config)

    if config["cipher"]["type"] != "AESGCM":
        raise NotImplementedError("Only AESGCM is supported as cipher type")

    cipher = AESGCM(get_key(config, confirm=False))
    if not aad:
        aad = os.path.basename(input_file.name).encode("utf-8")
        if aad.endswith(b".enc"):
            aad = aad[:-4]

    output_file.write(cipher.decrypt(b64decode(config["cipher"]["nonce"]), cipher_text, aad))


if __name__ == "__main__":
    main()
