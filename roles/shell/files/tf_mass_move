#!/usr/bin/env python3
import argparse
import os
import re
from subprocess import check_call
from subprocess import check_output

TF_COMMAND = os.environ.get("TF_COMMAND", "terraform")

EXAMPLES = r"""
Examples:
    tf_mass_move '^aws_ssm_parameter\.this\[([^]]+)\]\s*$' 'module.my_module[\1].aws_ssm_parameter.this'
    tf_mass_move '^aws_ssm_parameter\.this\["([^/"]+)/([^/"]+)"\]\s*$' 'module.my_module["\1"].aws_ssm_parameter.this["\2"]'
"""


def get_args():
    parser = argparse.ArgumentParser(
        description="Move/Rename Terraform resources in state",
        epilog=EXAMPLES,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--dry-run",
        help="Just print what would be moved",
        action="store_true",
    )

    parser.add_argument(
        "-i",
        "--input-state",
        help="Terraform's input state file",
        type=str,
        default=None,
    )
    parser.add_argument(
        "-o",
        "--output-state",
        help="Terraform's output state file",
        type=str,
        default=None,
    )

    parser.add_argument(
        "source_pattern",
        help="Regex pattern to match for moving",
        type=str,
    )
    parser.add_argument(
        "destination_pattern",
        help="Regex pattern to substitute for destination",
        type=str,
    )
    return parser.parse_args()


def main():
    args = get_args()
    regex = re.compile(args.source_pattern)

    for resource in get_resources(args.input_state):
        destination = get_resource_destination(regex, args.destination_pattern, resource)
        if destination:
            print(f"# Moving '{resource}' to '{destination}'...")
            move_resource(args.input_state, args.output_state, resource, destination, dry_run=args.dry_run)

    print("Done.")


def get_resources(input_state):
    cmd = [TF_COMMAND, "state", "list"]
    if input_state:
        cmd.extend(["-state", input_state])

    return [line for line in check_output(cmd).decode().splitlines() if line]


def get_resource_destination(regex, replace, source):
    destination = regex.sub(replace, source)
    if destination == source:
        return None
    return destination


def move_resource(input_state, output_state, source, destination, dry_run=False):
    cmd = [TF_COMMAND, "state", "mv"]
    if input_state:
        cmd.extend(["-state", input_state])
    if output_state:
        cmd.extend(["-state-out", output_state])
    if dry_run:
        cmd.append("-dry-run")
    cmd.extend([source, destination])

    check_call(cmd)


if __name__ == "__main__":
    main()
