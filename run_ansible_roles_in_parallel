#!/usr/bin/env -S python3 -u
import argparse
import os
import queue
import shlex
from collections import namedtuple
from signal import signal, SIGCHLD
from subprocess import Popen

from time import time


SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
ROLES_DIR = f"{SCRIPT_DIR}/roles"
SLEEP_INTERVAL = 10

ANSIBLE_ENV = os.environ.copy()
ANSIBLE_ENV["ANSIBLE_LIBRARY"] = f"~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules:{SCRIPT_DIR}/library"
ANSIBLE_ENV["ANSIBLE_LOAD_CALLBACK_PLUGINS"] = "true"
ANSIBLE_ENV["ANSIBLE_STDOUT_CALLBACK"] = "unixy"

Roles = namedtuple("Roles", ["child_to_parents", "parent_to_children"])


# Catch all SIGCHLD's and store the related child details
SIGCHLD_QUEUE = queue.Queue()
signal(SIGCHLD, lambda x, y: SIGCHLD_QUEUE.put(os.waitpid(-1, os.WNOHANG)))


def main():
    args = get_args()
    if args.debug:
        ANSIBLE_ENV["ANSIBLE_STDOUT_CALLBACK"] = "debug"
    if not args.role:
        # Build real dep tree from all roles
        roles = build_dep_tree()
    else:
        # Build fake dep tree using provided roles
        r = {role: set() for role in args.role}
        roles = Roles(r, r)
    run_roles(
        roles,
        {
            "USER": args.user,
            "UID": args.uid,
            "HOME": args.home,
        },
        check=args.check,
        ignore_errors=args.ignore_errors,
    )


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--user",
        help="What is the username of the primary workstation user?",
        required=True,
        type=str,
    )
    parser.add_argument(
        "--uid",
        help="What is the id of the primary workstation user?",
        required=True,
        type=str,
    )
    parser.add_argument(
        "--home",
        help="What is the home folder of the primary workstation user?",
        required=True,
        type=str,
    )
    parser.add_argument("role", help="Roles to execute (Default is all)", nargs="*", type=str)
    parser.add_argument(
        "-e",
        "--exclude",
        help="Roles to exclude",
        action="append",
        default=[],
        type=str,
    )
    parser.add_argument("-c", "--check", help="Check only", action="store_true")
    parser.add_argument(
        "-i",
        "--ignore-errors",
        help="Continue executing if errors occur",
        action="store_true",
    )
    parser.add_argument(
        "--debug",
        help="Change Ansible to Debug STDOUT",
        action="store_true",
    )
    return parser.parse_args()


def build_dep_tree():
    child_to_parents = load_role_dependencies()
    parent_to_children = get_role_dependants(child_to_parents)
    return Roles(child_to_parents, parent_to_children)


def load_role_dependencies():
    output = {}
    for role in os.scandir(ROLES_DIR):
        if ".DISABLED" in role.name:
            continue
        if role.is_dir():
            try:
                with open(f"{role.path}/depends_on", "r") as f:
                    # 1 line = 1 dependency, whole line is a role name
                    output[role.name] = set(f.read().splitlines())
            except FileNotFoundError:
                # Missing file equiv to empty depends_on list
                output[role.name] = set()
    return output


def get_role_dependants(child_to_parents):
    output = {role: set() for role in child_to_parents.keys()}
    for child, parents in child_to_parents.items():
        for parent in parents:
            try:
                output[parent].add(child)
            except KeyError:
                raise ValueError(f"Role '{child}' depends on non-existent role '{parent}'")
    return output


class RoleError(Exception):
    pass


def run_roles(roles, extra_vars, check=False, ignore_errors=False):
    errors = []
    running = {}
    while running or (roles.child_to_parents and (not errors or ignore_errors)):
        if not errors or ignore_errors:
            start_ready_roles(running, roles, extra_vars, check)
        else:
            print("\n\n##### Errors Detected, not starting any more roles ######")
            print("\n".join(errors))
            print("\n\n")

        wait_for_role_to_finish(running, roles, errors)
    if errors and not ignore_errors:
        raise RoleError(", ".join(errors))


def wait_for_role_to_finish(running, roles, errors):
    waiting_on = ", ".join([proc["role"] for proc in running.values()])
    print(f"Waiting on: {waiting_on}")
    try:
        # Wait for a SIGCHLD
        pid, exit_code = SIGCHLD_QUEUE.get(timeout=SLEEP_INTERVAL)
        if pid == 0:  # Failed to get which child died
            poll_running_roles(running, roles, errors)  # Check them all
            return

        process_finished_role(running, roles, pid, exit_code, errors)
        try:
            # Empty the queue incase we received more signals
            while True:
                pid, exit_code = SIGCHLD_QUEUE.get_nowait()
                process_finished_role(running, roles, pid, exit_code, errors)
        except queue.Empty:
            pass  # Queue has been emptied
    except queue.Empty:
        # Timeout used as a sleep. Safety check incase a signal was missed.
        poll_running_roles(running, roles, errors)  # Check them all


def start_ready_roles(running, roles, extra_vars, check):
    for child in list(roles.child_to_parents.keys()):
        if not roles.child_to_parents[child]:
            # If no dependencys left
            proc = start_ansible(child, extra_vars, check=check)
            running[proc.pid] = {"role": child, "proc": proc, "start": time()}
            del roles.child_to_parents[child]
    if not running:
        raise RoleError(f"Circular dependency detected: {roles.child_to_parents}")


def process_finished_role(running, roles, pid, exit_code, errors):
    proc = running[pid]
    parent = proc["role"]
    print(f"Role {parent}: Elapsed {time()-proc['start']}")
    print(f"Role {parent}: Exit Code {exit_code}")

    if exit_code != 0:
        errors.append(f"Role '{parent}' exited with status code: {exit_code}")

    for child in roles.parent_to_children.get(parent, []):
        roles.child_to_parents[child].remove(parent)
    del running[pid]


# Failsafe function
def poll_running_roles(running, roles, errors):
    for pid in list(running.keys()):
        exit_code = running[pid]["proc"].poll()
        if exit_code is not None:
            process_finished_role(running, roles, pid, exit_code, errors)


def start_ansible(role, extra_vars, check=False):
    print(f"Starting Role: {role}")

    cmd = ["ansible localhost"]
    if check:
        cmd.append("-CD")
    cmd.extend(
        [
            "-m include_role",
            f"-a name={shlex.quote(role)}",
            "-e ansible_python_interpreter=/usr/bin/python3",
        ]
    )
    cmd.extend(extra_vars_to_args(extra_vars))
    cmd.extend(
        [  # Add output prefix's
            "2>&1 |awk -W interactive",
            f"-v role={shlex.quote(role)}",
            '\'{print strftime("%Y-%m-%d %H:%M:%S")": "role": "$0}\'',
            ";exit ${PIPESTATUS[0]}",  # Pass correct exit code back
        ]
    )
    return Popen(" ".join(cmd), shell=True, executable="/bin/bash", cwd=SCRIPT_DIR, env=ANSIBLE_ENV)


def extra_vars_to_args(extra_vars):
    return [f"-e {shlex.quote(name)}={shlex.quote(value)}" for name, value in extra_vars.items()]


if __name__ == "__main__":
    main()
